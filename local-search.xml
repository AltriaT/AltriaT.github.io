<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>graph</title>
    <link href="/2021/11/22/graph/"/>
    <url>/2021/11/22/graph/</url>
    
    <content type="html"><![CDATA[<h1 id="图1"><a href="#图1" class="headerlink" title="图1"></a>图1</h1><pre><code class=" mermaid">graph LR图--&gt;图的定义图--&gt;图的存储结构--&gt;邻接表--&gt;稀疏图图的存储结构--&gt;邻接矩阵--&gt;稠密图图的存储结构--&gt;十字链表图--&gt;图的遍历图的遍历--&gt;深度优先遍历dfs图的遍历--&gt;广度优先遍历bfs图--&gt;图的应用图的应用--&gt;最小生成树--&gt;prim最小生成树--&gt;Kruskal图的应用--&gt;最短路径最短路径--&gt;Dijkstra最短路径--&gt;Floyd图的应用--&gt;拓扑排序--&gt;逆拓扑排序图的应用--&gt;关键路径</code></pre><h2 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2><p>图是由顶点的有穷非空集合和顶点之间边的集合组成， 通常表示为: G（V，E）， 其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。$|V|$表示点的个数，$|E|$表示边的个数。</p><p>注意：树可以是空树，线性表可以是空表，图不可以为空图。</p><p>图的种类：(无向图、有向图、无向网、有向网)，(简单图，多重图)，(完全图)，(子图)，(稠密图、稀疏图)。</p><p>##图的存储结构</p><ol><li><p>邻接表：用来存稀疏图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MaxVerNum=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span>&#123;</span><br>    <span class="hljs-comment">//弧指向顶点的位置</span><br><span class="hljs-keyword">int</span> adjvex;<br>    <span class="hljs-comment">//指向下一个弧的指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcNode</span> *<span class="hljs-title">next</span>;</span><br>    <span class="hljs-comment">//弧的信息，例如权值</span><br>    <span class="hljs-comment">//InfoType info;</span><br>&#125;ArcNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VNode</span>&#123;</span><br>    <span class="hljs-comment">//顶点信息</span><br>    VertexType data;<br>    <span class="hljs-comment">//第一个弧</span><br>    ArcNode *firstarc;<br>&#125;VNode,AdjList[MaxVerNum];<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-comment">//邻接表(结点数组)</span><br>    AdjList vertices;<br>    <span class="hljs-keyword">int</span> vexnum,arcnum;<br>&#125;ALGraph;<br></code></pre></td></tr></table></figure></li><li><p>邻接矩阵：用来存稠密图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ArcCell</span>&#123;</span><br>    <span class="hljs-keyword">int</span> adj;<br>    <span class="hljs-comment">//节点其他信息</span><br>    <span class="hljs-comment">//InfoType *info;</span><br>&#125;ArcCell,AdjMatrix[MaxVerNum][MaxVerNum];<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-keyword">int</span> vexs[MaxVerNum];<br>    AdjMatrix arcs;<br>    <span class="hljs-keyword">int</span> vexnum,arcnum;<br>    <span class="hljs-comment">//int in_degree[MaxVerNum];</span><br>    <span class="hljs-comment">//bool flag[MaxVerNum];</span><br>&#125;ALGraph;<br></code></pre></td></tr></table></figure><p>创建无向边，就是创建有向边正反两遍。</p><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p>与树的层序遍历相似，用到了队列。</p><ol><li><p>从某一v结点开始访问</p></li><li><p>记录v的所有相邻节点</p></li><li><p>只要没访问过，从相邻结点队列中出一个从1开始。</p></li><li><p>直到图中点都被访问</p><p><em><strong>*类似于树的bfs遍历，区别是有重复，所以要flag标记。*</strong></em></p><p>邻接表的bfs：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(ALGraph &amp;G,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><span class="hljs-comment">//初始化标志信息 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;G.vexnum;k++) G.vertices[k].flag=<span class="hljs-literal">false</span>;<br><span class="hljs-comment">//用到了队列 </span><br>queue Q;<br><span class="hljs-built_in">InitQueue</span>(Q);<br><span class="hljs-built_in">push</span>(Q,i);<br><span class="hljs-comment">//做标记 </span><br>G.vertices[i].flag=<span class="hljs-literal">true</span>;<br><span class="hljs-comment">//队不空出队 访问 </span><br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">IsEmpty</span>(Q))&#123;<br><span class="hljs-keyword">int</span> e;<br><span class="hljs-built_in">pop</span>(Q,e);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,G.vertices[e].data);<br><span class="hljs-comment">//将出队元素的相邻元素入队</span><br><span class="hljs-keyword">for</span>(ArcNode *q=G.vertices[e].firstarc;q;q=q-&gt;nextarc)&#123;<br><span class="hljs-keyword">if</span>(G.vertices[q-&gt;adjvex].flag)<span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">push</span>(Q,q-&gt;adjvex);<br>G.vertices[q-&gt;adjvex].flag=<span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>邻接矩阵bfs：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(MGraph &amp;G,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;G.vexnum;k++) G.flag[k]=<span class="hljs-number">0</span>;<br>queue Q;<br><span class="hljs-built_in">InitQueue</span>(Q);<br><span class="hljs-built_in">push</span>(Q,i);<br>G.flag[i]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">IsEmpty</span>(Q))&#123;<br><span class="hljs-keyword">int</span> e;<br><span class="hljs-built_in">pop</span>(Q,e);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,G.vexs[e]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;G.vexnum;k++)&#123;<br><span class="hljs-keyword">if</span>(G.flag[k])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(G.arcs[e][k].adj!=<span class="hljs-number">0x3f3f3f3f</span>)&#123;<span class="hljs-comment">//无穷代表不连接</span><br><span class="hljs-built_in">push</span>(Q,k);<br>G.flag[k]=<span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><ol><li>从某一结点v开始访问</li><li>访问v的某一相邻结点（没被访问过）</li><li>重复，直到不能再访问</li></ol><p><em><strong>*类似于树的dfs遍历，区别是有重复，所以要flag标记。*</strong></em></p><p>邻接表的dfs (递归)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ALGraph &amp;G,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><span class="hljs-comment">//出口：该节点已被访问过。 </span><br><span class="hljs-keyword">if</span>(G.vertices[i].flag)<span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//访问结点 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,G.vertices[i].data);<br><span class="hljs-comment">//标记已访问 </span><br>G.vertices[i].flag=<span class="hljs-literal">true</span>;<br><span class="hljs-comment">//遍历当前结点的所有相邻的结点依次dfs遍历 </span><br><span class="hljs-keyword">for</span>(ArcNode *q=G.vertices[i].firstarc;q;q=q-&gt;nextarc)&#123;<br><span class="hljs-built_in">dfs</span>(G,q-&gt;adjvex);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>邻接矩阵：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(MGraph &amp;G,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">if</span>(G.flag[i])<span class="hljs-keyword">return</span>; <span class="hljs-comment">//exit</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,G.vexs[i]);<br>G.flag[i]=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;G.vexnum;k++)&#123;<br><span class="hljs-keyword">if</span>(G.arcs[i][k].adj!=<span class="hljs-number">0x3f3f3f3f</span>)<span class="hljs-built_in">dfs</span>(G,k);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图的特征"><a href="#图的特征" class="headerlink" title="图的特征"></a>图的特征</h2><ol><li>$TD(v)=ID(v)+OD(v)$</li><li>$\sum_{i=1}^n TD(v_i)=2*e$ ,TD是vi的度</li><li>$ID(v)=OD(v)=e$</li></ol></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HuffmanTree</title>
    <link href="/2021/10/31/HuffmanTree/"/>
    <url>/2021/10/31/HuffmanTree/</url>
    
    <content type="html"><![CDATA[<h1 id="HuffmanTree"><a href="#HuffmanTree" class="headerlink" title="HuffmanTree"></a>HuffmanTree</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有n个学生去考试，分数分为ABCDF四个等级，当我们用程序去分类时，分类代码是这样写的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">seperate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> score)</span></span>&#123;<br><span class="hljs-keyword">if</span>(score&gt;=<span class="hljs-number">90</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&gt;=<span class="hljs-number">80</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;B&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&gt;=<span class="hljs-number">70</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&gt;=<span class="hljs-number">60</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;D&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;F&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样做是万金油的方法，但如果我的学生都不及格（开个玩笑），一共要进行n*4次判断才可以完成。</p><p>于是代码写成这样才是最优</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span> <span class="hljs-title">seperate</span><span class="hljs-params">(<span class="hljs-keyword">int</span> score)</span></span>&#123;<br><span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">60</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;F&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">70</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;D&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">80</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">90</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;B&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这样我的学生都考满分，这又是效率最差的方法。</p><p>为了追求效率我们不能将问题细分到每一种情况去考虑。</p><p>那么有没有一种可以使得所有情况都较为高效的方法来解决这种分类问题呢，将这些数据进行一个压缩。</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><p>首先要知道的是我们要让数量最多的类别进行最少次数的判断。这种思想类似于概率论，种类的数量比作频率p，种类的判断次数比作变量x，我们要做的就是使均值($\sum_{i=1}^{n}{x_i*p_i}$)达到最小。</p><p>而且我们还要保证这些编码互相不能成为前缀，也就是译码（解压）时不可以出现歧义。</p><p>那么找一种什么结构来存呢，我们会想到的是用二叉树来存储。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-keyword">int</span> weight;<br><span class="hljs-keyword">int</span> lchild,rchild,parent;<br>&#125;*HuffmanTree,HTNode;<br></code></pre></td></tr></table></figure><p>离散数学里学过树是可以有权重的。那么这个权重就可以表示数量等一些信息的重要性。越重要的信息编码量就越小，这样就可以保证最后的信息总量被压缩。</p><p>其编码就是用二叉树的左边和右边来区分（这样就形成了一颗tree树），信息放在叶子节点，从根到叶子的路径就是他的编码。</p><p>我们要做的就是将权值大的信息放离树根近的地方。</p><p>image<img src="/img/tree/5.png" alt="哈夫曼树"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HuffmanCoding</span><span class="hljs-params">(HuffmanTree &amp;HT,HuffmanCode &amp;HC,<span class="hljs-keyword">int</span> *w,<span class="hljs-keyword">int</span> n)</span></span>&#123; <br><span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span>;<br><span class="hljs-comment">//计算节点总数</span><br><span class="hljs-keyword">int</span> m=n*<span class="hljs-number">2</span><span class="hljs-number">-1</span>;<br><span class="hljs-comment">//初始化哈夫曼树</span><br>HT = (HuffmanTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(HTNode)*(m+<span class="hljs-number">1</span>));<span class="hljs-comment">//严奶奶不喜欢用第0个 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<span class="hljs-comment">//方便我自己写的，所以改了一下 </span><br>flag[i]=<span class="hljs-literal">true</span>;<br>HT[i].parent=<span class="hljs-number">0</span>;<br>HT[i].lchild=<span class="hljs-number">0</span>;<br>HT[i].rchild=<span class="hljs-number">0</span>;<br>&#125;<br>HT-&gt;n=n;<br><span class="hljs-comment">//工作指针</span><br>HuffmanTree p;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(p=HT,i=<span class="hljs-number">1</span>;i&lt;=n;i++)p[i].weight=w[i];<br><span class="hljs-keyword">for</span>(;i&lt;=m;++i)p[i].weight=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=n+<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">int</span> s1,s2;<br>Select(HT,i<span class="hljs-number">-1</span>,s1,s2);<br>HT[s1].parent=i;<br>HT[s2].parent=i;<br>HT[i].lchild=s1;<br>HT[i].rchild=s2;<br>HT[i].weight=HT[s1].weight+HT[s2].weight;<br>&#125;<br><br><span class="hljs-comment">//编码 </span><br>HC = (HuffmanCode)<span class="hljs-built_in">malloc</span>((n+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>*));<br><span class="hljs-keyword">char</span>* cd = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br>cd[n<span class="hljs-number">-1</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//经计算最大n-1个 </span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">int</span> start = n<span class="hljs-number">-1</span>;<span class="hljs-comment">//严奶奶倒着存的 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c=i,f=HT[i].parent;f!=<span class="hljs-number">0</span>;c=f,f=HT[f].parent)&#123;<br><span class="hljs-keyword">if</span>(HT[f].lchild==c)cd[--start]=<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">else</span> cd[--start]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>&#125;<br>HC[i] = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>((n-start)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br><span class="hljs-built_in">strcpy</span>(HC[i],&amp;cd[start]);<span class="hljs-comment">//严奶奶截取的刚刚好</span><br>&#125;<br><span class="hljs-built_in">free</span>(cd);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>threaded binary tree</title>
    <link href="/2021/10/31/threaded-binary-tree/"/>
    <url>/2021/10/31/threaded-binary-tree/</url>
    
    <content type="html"><![CDATA[<h1 id="Threaded-Binary-Tree"><a href="#Threaded-Binary-Tree" class="headerlink" title="Threaded Binary Tree"></a>Threaded Binary Tree</h1><p>线索二叉树实际上是对二叉树的一种优化，利用二叉树中的空链域(n+1个)来存储前驱或后继。</p><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>image<img src="/img/tree/3.jpg" alt="存储结构"></p><p>0代表不空，1代表空</p><p>如果左边空就将lchild链接前驱，如果右边空就将rchild链接后继。</p><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><p>先序线索二叉树</p><p>中序线索二叉树</p><p>后续线索二叉树</p><p>如图以后续线索二叉树为例</p><p>image<img src="/img/tree/4.png" alt="后继"></p><h2 id="mend"><a href="#mend" class="headerlink" title="mend"></a>mend</h2><p>后续二叉树并不完善，无法做到全部查找后继，需要栈的辅助</p><p>原因：</p><p>​    后续线索二叉树是左右根</p><p>​    如图根节点可能没有空余的指针，所以根节点可能找不到后继，因此需要栈来记录父节点。</p><p>​    image<img src="/img/tree/4.png" alt="后继"></p><p>同理先序二叉树也不完善，无法查找全部前驱。</p>]]></content>
    
    
    
    <tags>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>binary tree</title>
    <link href="/2021/10/22/binary-tree/"/>
    <url>/2021/10/22/binary-tree/</url>
    
    <content type="html"><![CDATA[<h1 id="Binary-tree"><a href="#Binary-tree" class="headerlink" title="Binary tree"></a>Binary tree</h1><h2 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h2><p>​    二叉树是另一种树形结构，其特点是每个结点至多有两棵子树（即二叉树中不存在度大于二节点），并且二叉树的子树有左右之分，其次序不能任意颠倒。</p><p>​    二叉树也是递归定义。二叉树是n(n&gt;=0)个结点的有限集合：</p><ol><li><p>或者为空二叉树，即n=0。</p></li><li><p>或者为一个根结点和两个互不相交的被称为根的左子树和右子树组成。左子树和右子树有分别是一棵二叉树。</p><p>二叉树是有序树，若其左右子树颠倒，则成为另一棵不同的二叉树。即使树中结点只有一棵子树，也要区分他是左子树还是右子树。二叉树的5种基本状态就看书吧。</p></li></ol><p>二叉树与度为2的有序树的区别：</p><p>​    1.度为2的树至少有3个结点，而二叉树可以为空。</p><p>​    2.度为2的有序树的孩子的左右次序是相当于另一孩子而言，若某个结点只有一个孩子，则这个孩子就无需区分其左右次序，而二叉树无论其左右孩子是否为2，均为确定其左右次序，即二叉树的结点次序不是相对于另一结点而言，而确定的。</p><h2 id="Special-binary-tree"><a href="#Special-binary-tree" class="headerlink" title="Special binary tree"></a>Special binary tree</h2><p>​    1.满二叉树：高为h，且含有$2^{h}-1$的结点的二叉树称为满二叉树，即树中每层都含有最多节点。可用序号表述，若双亲结点为$i/2$,则有左右孩子时，左孩子为$2<em>i$,右孩子为$2</em>i+1$。</p><p>​    2.完全二叉树：就是将要成为满二叉树，最后一层可能与满二叉树不同的树。</p><p>​        1）若$i&lt;\lfloor n/2 \rfloor$,他就是分支节点。</p><p>​        2）若有度为一的结点，则只有一个，且只有左孩子。</p><p>​        3）一旦出现度为1的结点，它后面全是叶子节点。</p><p>​        4）n为奇数，则每个分支都有左右孩子，若n为偶数，则序号的最大分支结点<strong>（编号为$n/2$）</strong>只有左孩子，其余没得左右孩子。</p><p>​    3.  二叉排序树：左子树上的结点均小于根节点的关键字。右子树上所有节点的关键字都大于根节点的关键字。左子树和右子树又是二叉排序树。</p><p>​    4.平衡二叉树：树上任意节点的左子树和右子树的深度只差不超过1。</p><h2 id="property"><a href="#property" class="headerlink" title="property"></a>property</h2><ol><li>非空二叉树上的叶子结点数等于度为2的节点数加1，即n0=n2+1。</li><li>非空二叉树第k层上至多有$2^{k-1}$个结点。</li><li>高度为h的二叉树至多有$2^h-1$个结点。</li><li>具有n个结点的完全二叉树的高度为$\lfloor log_2{n}\rfloor+1$或$\lceil log_2{n}+1 \rceil$</li><li>$2^{h-1}-1&lt;n&lt;=2^{h}-1$或$2^{h-1}&lt;=n&lt;2^h$</li></ol><h2 id="storage-structure"><a href="#storage-structure" class="headerlink" title="storage structure"></a>storage structure</h2><p>1.顺序存储结构</p><p>​    有一段连续的地址存储单元，自上而下，自左而右存储完全而完全二叉树上的结点。</p><p>​    缺点： 浪费空间</p><p>​    优点：好查找</p><p>2.链式结构存储</p><p><img src="/img/tree/1.png" alt="链式结构"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span>&#123;</span><br>ElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span><br>&#125;*BiTree,BiTNode;<br></code></pre></td></tr></table></figure><p>优点：空间利用率高</p><p>缺点：需要的查找时间长</p><h2 id="basic-operation"><a href="#basic-operation" class="headerlink" title="basic operation"></a>basic operation</h2><h3 id="链式结构下"><a href="#链式结构下" class="headerlink" title="链式结构下"></a>链式结构下</h3><h4 id="1-创建而二叉树"><a href="#1-创建而二叉树" class="headerlink" title="1.创建而二叉树"></a>1.创建而二叉树</h4><p>创建二叉树用的是二叉树的递归定义。</p><p>按先序遍历来创建二叉树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateBitree</span><span class="hljs-params">(BiTree &amp;T)</span></span>&#123;<br><span class="hljs-keyword">char</span> ch=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<span class="hljs-comment">//递归出口</span><br>T=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>T=(BiTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(BiTNode));<span class="hljs-comment">//分配空间</span><br>        T.data=ch;<br>       <span class="hljs-built_in">CreateBitree</span>(T-&gt;lchild);<br>        <span class="hljs-built_in">CreateBitree</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-先序遍历"><a href="#2-先序遍历" class="headerlink" title="2.先序遍历"></a>2.先序遍历</h4><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">(BiTree &amp;T)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,T-&gt;data);<span class="hljs-comment">//操作</span><br>    <span class="hljs-built_in">PreorderTraversal</span>(T-&gt;lchild);<br>    <span class="hljs-built_in">PreorderTraversal</span>(T-&gt;rchild);<br></code></pre></td></tr></table></figure><h5 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">(BiTree &amp;T)</span></span>&#123;<br>    stack S;<br>    BiTree p=T;<br><span class="hljs-keyword">if</span>(T)&#123;<span class="hljs-comment">//非空树就遍历</span><br><span class="hljs-built_in">InitStack</span>(S);<span class="hljs-comment">//初始化栈</span><br>        <span class="hljs-keyword">while</span>(p||!<span class="hljs-built_in">IsEmpty</span>(S))&#123;<span class="hljs-comment">//栈里不空就可以遍历</span><br>        <span class="hljs-keyword">if</span>(p)&#123;<span class="hljs-comment">//往左边走到头</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>,p-&gt;data);<span class="hljs-comment">//先访问根节点</span><br>            <span class="hljs-built_in">push</span>(S,p);<span class="hljs-comment">//根入栈</span><br>           p=p-&gt;lchild;<span class="hljs-comment">//指向左孩子</span><br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">pop</span>(S,p);<span class="hljs-comment">//空了就出栈</span><br>            p=p-&gt;rchild;<br>        &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二叉树千变万变离不开这两个操作</strong></p><h4 id="3-层序遍历（非递归）"><a href="#3-层序遍历（非递归）" class="headerlink" title="3.层序遍历（非递归）"></a>3.层序遍历（非递归）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LevelTraverse</span><span class="hljs-params">(BiTree T)</span></span>&#123;<br>LQueue Q;<br>    BiTree p=T;<br>    <span class="hljs-keyword">if</span>(T)&#123;<br><span class="hljs-built_in">InitQueue</span>(Q);<br>        <span class="hljs-built_in">EnQueue</span>(Q,p);<br>        <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">QueueEmpty</span>(Q))&#123;<span class="hljs-comment">//每次把队头的孩子放进来，不空就队首出队，O(n)。</span><br>            <span class="hljs-built_in">DeQueue</span>(Q,p);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,p-&gt;data);<br>            <span class="hljs-keyword">if</span>(p-&gt;lchild)<span class="hljs-built_in">EnQueue</span>(Q,p-&gt;lchild);<br>            <span class="hljs-keyword">if</span>(p-&gt;rchild)<span class="hljs-built_in">EnQueue</span>(Q,p-&gt;rchild);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>可以很轻松的实现层序遍历，但只能存完全二叉树。</p><h4 id="1-层序遍历（输入）"><a href="#1-层序遍历（输入）" class="headerlink" title="1.层序遍历（输入）"></a>1.层序遍历（输入）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> bitree[<span class="hljs-number">100010</span>];<br>    <span class="hljs-keyword">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)cin&gt;&gt;bitree[i];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-先序遍历-1"><a href="#2-先序遍历-1" class="headerlink" title="2.先序遍历"></a>2.先序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PreorderTraversal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> bitree[],<span class="hljs-keyword">int</span> u,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br><span class="hljs-keyword">if</span>(u&gt;n)<span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,bitree[i]);<br>    <span class="hljs-built_in">PreorderTraversal</span>(bitree,u*<span class="hljs-number">2</span>,n);<br>    <span class="hljs-built_in">PreorderTraversal</span>(bitree,u*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要利用的是二叉树的性质。</p>]]></content>
    
    
    
    <tags>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tree</title>
    <link href="/2021/10/21/tree/"/>
    <url>/2021/10/21/tree/</url>
    
    <content type="html"><![CDATA[<h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><h3 id="1-definition"><a href="#1-definition" class="headerlink" title="1.definition"></a>1.definition</h3><p>​        树是n个（n&gt;=0）节点的有限集。当n=0时，称为空树。 在任意一棵非空树中应满足：</p><p>​        1.有且仅有一个特定的称为根的节点</p><p>​        2.当n&gt;1时, 其余节点可分为m（m&gt;0）个互不相交的有限集T1,T2,…,Tm，其中每个集合本身又是一颗树，并            且称为根的子树。</p><p>​        这个定义很明显是递归定义，即在树的定义中用到了自身。</p><p>​        树是一种递归的数据结构。</p><p>​        树作为一种逻辑结构具有以下两个特点：</p><p>​            1）树的根节点没有前驱，除根结点以外所有节点有且只有一个前驱。</p><p>​            2）树的所有节点可以拥有0或多个后继。</p><h3 id="2-trem"><a href="#2-trem" class="headerlink" title="2.trem"></a>2.trem</h3><p>​        树的高：数的最大层数。</p><p>​        节点的度：节点的孩子个数。（这里要区分离散数学里的度）</p><p>​        树的度：节点度最大的数</p><p>​        叶子节点：度为0的节点。</p><p>​        有序树：节点的左右子树从左到右有序。</p><p>​        无序树：节点的左右子树从左到右无序。</p><p>​        路径：两个节点的路径是这两个节点之间所经过节点序列构成的。</p><p>​        路径长度： 路径上所经过的边的个数。</p><h3 id="3-property"><a href="#3-property" class="headerlink" title="3.property"></a>3.property</h3><p>​        1）节点数=节点度数之和+1</p><p>​        2）度为m的树上，第i层至多有$m^{i-1}$个节点。</p><p>​        3）高为h的m叉树至多有（$m^{h}$-1)(m-1)。</p><p>​        4）n个节点的m叉树的最小高度为$\log_m^{n(m-1)+1}$</p><h3 id="4-fores"><a href="#4-fores" class="headerlink" title="4.fores"></a>4.fores</h3><p>​        m棵互不相交树的集合。（他可以和书相互转换）</p>]]></content>
    
    
    
    <tags>
      
      <tag>data structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP</title>
    <link href="/2021/09/29/KMP/"/>
    <url>/2021/09/29/KMP/</url>
    
    <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><p>1.朴素算法</p><p>2.KMP算法的过程</p><p>3.next数组求法</p><p>4.KMP算法代码实现</p><p>5.next数组优化</p><h2 id="1-朴素算法"><a href="#1-朴素算法" class="headerlink" title="1.朴素算法"></a>1.朴素算法</h2><p>  字符串匹配的朴素算法是文本串T与匹配串P逐个比较的过程。</p><p><img src="/img/KMP/1.png" alt="朴素算法图"></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">(string T,string P)</span></span>&#123;<br><span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;T.<span class="hljs-built_in">size</span>())&#123;<span class="hljs-comment">//遍历T中元素 </span><br><span class="hljs-keyword">if</span>(T[i]==P[j])i++,j++;<span class="hljs-comment">//对T[i]与P[j]对比，相等就比较下一位。 </span><br><span class="hljs-keyword">else</span> &#123; <br>i=i-j+<span class="hljs-number">1</span>;<span class="hljs-comment">//不等就i指针到刚开始的下一位，j从头开始 </span><br>j=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(j==P.<span class="hljs-built_in">size</span>())&#123;<span class="hljs-comment">//模式串匹配完，输出文本串的开始匹配的位置.</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i-j);<br>&#125;<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="2-KMP算法的过程"><a href="#2-KMP算法的过程" class="headerlink" title="2.KMP算法的过程"></a>2.KMP算法的过程</h2><p>​    KMP算法就比较机智的利用模式串中本身蕴含的信息跳过了一些不必要被比较。</p><p>如下图，匹配失败，j回到图示绿色位置而i不变化，这样可以减少下一次比较次数且不会有丢落，原因就是P1,P2和S1串相同，我们利用已知的信息可以跳过从头开始比较相同子串的过程，并且这样相同的子串越长可节约的时间就越多。</p><p><img src="/img/KMP2.png" alt="KMP过程图"></p><h2 id="3-next数组求法"><a href="#3-next数组求法" class="headerlink" title="3.next数组求法"></a>3.next数组求法</h2><p>​    于是我们需要初始化求得一个信息表（next数组），来记录每一个字符前子串中的前缀与后缀相同的最大长度（前缀是不含子串最后一个字符的，同理后缀），并且这种性质一定藏在模式串P中，所以我们无需考虑文本串T,只对P操作就可以。</p><p>​    比如：P: $abaabcac$</p><p>​    0: a—没有相同   —下一个为a才行</p><p>​    1: ab—最大前缀是a，最大后缀是b，没相同  —下一个为a才行</p><p>​    2: aba—前缀是a，后缀是a最大，为1    —下一个字符要想加入最大前后缀必须为b</p><p>​    3: abaa—不是b,但和首字符相同，为1    —下一个字符要想加入最大前后缀必须为b</p><p>​    4:abaab—是b 为2    —下一个字符要想加入最大前后缀必须为a</p><p>​    5:abaabc—不是a, 回到0:也不行，为0  —下一个为a才行</p><p>​    6:abaabca—是a, 为1    —下一个为b才行对应2的条件</p><p>​    可以看出这是一个递归的求解，下一个与前一个有关</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_next</span><span class="hljs-params">(string P,<span class="hljs-keyword">int</span> next[])</span></span>&#123;<br>i=<span class="hljs-number">1</span>;next[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;P[<span class="hljs-number">0</span>])&#123;<br>        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>||P[i]==P[j])&#123;i++;j++;next[i]=j;&#125;<br>        <span class="hljs-keyword">else</span> j=next[j];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/KMP/3.png" alt="next"></p><pre><code>## 4.KMP算法代码实现</code></pre><p>KMP算法算法实现如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">(<span class="hljs-keyword">char</span> T[],<span class="hljs-keyword">char</span> P[])</span></span>&#123;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-keyword">int</span>  ne[<span class="hljs-number">100010</span>];<br>n=<span class="hljs-built_in">strlen</span>(T);<br>m=<span class="hljs-built_in">strlen</span>(P);<br><span class="hljs-built_in">get_next</span>(P,ne);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,p=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">while</span>(p&gt;<span class="hljs-number">0</span>&amp;&amp;T[i]!=P[p])<span class="hljs-comment">//递归可以节约的点</span><br>p=ne[p<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span>(T[i]==P[p])p++;<span class="hljs-comment">//匹配上就比较下一个</span><br><span class="hljs-keyword">if</span>(p==m)cout&lt;&lt;i-p+<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-next数组优化"><a href="#5-next数组优化" class="headerlink" title="5.next数组优化"></a>5.next数组优化</h2><p>可以看出当T与P匹配不上时就去查找对应信息表，一直只查到可以匹配上或者开头。于是在get_next时就可以直接递归到位。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_next</span><span class="hljs-params">(<span class="hljs-keyword">char</span> p[],<span class="hljs-keyword">int</span>* ne)</span></span>&#123;<br><span class="hljs-keyword">int</span> m;<br>m=<span class="hljs-built_in">strlen</span>(p);<br>ne[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,k=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br><span class="hljs-keyword">while</span>(k&gt;<span class="hljs-number">0</span>&amp;&amp;p[i]!=p[k])<br>k=p[k<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span>(p[i]==p[k])&#123;<br>k++;<br>&#125;<br>ne[i]=k;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C string to float number</title>
    <link href="/2021/09/14/C-string-to-float-number/"/>
    <url>/2021/09/14/C-string-to-float-number/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> c;<br>c=getchar();<br><span class="hljs-keyword">double</span> data=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">double</span> tans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">bool</span> flag=<span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span>(c!=<span class="hljs-string">&#x27;#&#x27;</span>)&#123;<span class="hljs-comment">//#输入结束</span><br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>flag=<span class="hljs-literal">false</span>;<br>c=getchar();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(flag)data=data*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">else</span> &#123;<br>tans*=<span class="hljs-number">0.1</span>;<br>data+=tans*(c-<span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>&#125;<br>c=getchar();<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My first blog</title>
    <link href="/2021/09/12/my-first-blog/"/>
    <url>/2021/09/12/my-first-blog/</url>
    
    <content type="html"><![CDATA[<p>​    I cross a vary hard way to get a blog which to record my experience.</p>]]></content>
    
    
    
    <tags>
      
      <tag>diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
